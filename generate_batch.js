/**
 * Batch Product Description Generator
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
 * –≤ –ø–∞–∫–µ—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ. –í–ù–ò–ú–ê–ù–ò–ï: –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ generate_for_product.js
 * 
 * –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–æ–≤–∞—Ä–æ–≤:
 * - –í —Ñ–∞–π–ª–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω—ã –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤, –ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É
 * - –ü—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è
 * - –°—Ç—Ä–æ–∫–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å # —Å—á–∏—Ç–∞—é—Ç—Å—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –∏ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è
 */

const fs = require('fs').promises;
const path = require('path');
const chalk = require('chalk');
const readline = require('readline');
const { generateProductDescription } = require('./generate_for_product');

/**
 * –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
 * 
 * @param {string} question - –í–æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Promise<boolean>} - Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º (true/false)
 */
async function askForConfirmation(question) {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });

  return new Promise(resolve => {
    rl.question(question, answer => {
      rl.close();
      resolve(answer.toLowerCase().startsWith('y'));
    });
  });
}

/**
 * –ß–∏—Ç–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
 * 
 * @param {string} filePath - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–æ–≤–∞—Ä–æ–≤
 * @returns {Promise<string[]>} - –ú–∞—Å—Å–∏–≤ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Ç–æ–≤–∞—Ä–æ–≤
 */
async function readProductListFromFile(filePath) {
  try {
    const content = await fs.readFile(filePath, 'utf8');
    return content
      .split('\n')
      .map(line => line.trim())
      .filter(line => line && !line.startsWith('#')); // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
  } catch (error) {
    console.error(chalk.red(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${filePath}:`), error);
    throw error;
  }
}

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–∞–∫–µ—Ç–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ–ø–∏—Å–∞–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤
 * 
 * @param {string} filePath - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–æ–≤–∞—Ä–æ–≤
 * @param {Object} options - –û–ø—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
 * @param {boolean} options.skipConfirmation - –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
 * @returns {Promise<Object[]>} - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
 */
async function generateBatchDescriptions(filePath, options = {}) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    try {
      await fs.access(filePath);
    } catch (error) {
      throw new Error(`–§–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
    }
    
    // –ß–∏—Ç–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    const productList = await readProductListFromFile(filePath);
    if (!productList.length) {
      throw new Error('–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
    }
    
    console.log(chalk.blue(`üîç –ù–∞–π–¥–µ–Ω–æ ${productList.length} —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`));
    
    // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å generate_for_product.js
    if (productList.length === 1) {
      console.log(chalk.yellow(`‚ö†Ô∏è –í —Ñ–∞–π–ª–µ —É–∫–∞–∑–∞–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä: "${productList[0]}"`));
      console.log(chalk.yellow(`üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: node generate_for_product.js "${productList[0]}"`));
      
      if (!options.skipConfirmation) {
        const proceed = await askForConfirmation(chalk.cyan('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π? (y/n): '));
        if (!proceed) {
          console.log(chalk.blue('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ generate_for_product.js –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.'));
          process.exit(0);
        }
      }
    } else {
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤
      if (!options.skipConfirmation) {
        console.log(chalk.yellow(`‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å ${productList.length} —Ç–æ–≤–∞—Ä–æ–≤:`));
        productList.forEach((product, index) => {
          console.log(chalk.yellow(`  ${index + 1}. ${product}`));
        });
        
        console.log(chalk.cyan(`\nüí° –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:`));
        console.log(chalk.cyan(`   node generate_for_product.js "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"`));
        
        const proceed = await askForConfirmation(chalk.magenta('\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –í–°–ï —ç—Ç–∏ —Ç–æ–≤–∞—Ä—ã? (y/n): '));
        if (!proceed) {
          console.log(chalk.blue('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.'));
          process.exit(0);
        }
      }
    }
    
    // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    const results = [];
    const failures = [];
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä
    for (let i = 0; i < productList.length; i++) {
      const productName = productList[i];
      console.log(chalk.blue(`\n[${i + 1}/${productList.length}] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–∞: "${productName}"`));
      
      try {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏ –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å—é (force: true)
        const result = await generateProductDescription(productName, {
          ...options,
          force: true // –í –ø–∞–∫–µ—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
        });
        
        results.push({
          productName,
          category: result.category,
          success: true,
          path: result.savedPath
        });
        
        console.log(chalk.green(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ç–æ–≤–∞—Ä: "${productName}"`));
      } catch (error) {
        console.error(chalk.red(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–≤–∞—Ä–∞ "${productName}":`));
        console.error(error.message);
        
        failures.push({
          productName,
          error: error.message
        });
      }
    }
    
    // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log(chalk.blue(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:`));
    console.log(chalk.green(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${results.length} —Ç–æ–≤–∞—Ä–æ–≤`));
    
    if (failures.length) {
      console.log(chalk.red(`‚ùå –û—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: ${failures.length} —Ç–æ–≤–∞—Ä–æ–≤`));
      failures.forEach(failure => {
        console.log(chalk.red(`   - "${failure.productName}": ${failure.error}`));
      });
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
    const reportData = {
      date: new Date().toISOString(),
      totalProducts: productList.length,
      successful: results.length,
      failed: failures.length,
      successfulItems: results,
      failedItems: failures
    };
    
    const reportPath = path.join(__dirname, 'data', 'output', `batch_report_${Date.now()}.json`);
    await fs.mkdir(path.dirname(reportPath), { recursive: true });
    await fs.writeFile(reportPath, JSON.stringify(reportData, null, 2), 'utf8');
    console.log(chalk.blue(`üìù –û—Ç—á–µ—Ç –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${reportPath}`));
    
    return {
      success: results,
      failures,
      reportPath
    };
  } catch (error) {
    console.error(chalk.red('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ:'));
    console.error(error);
    throw error;
  }
}

// –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç, –µ—Å–ª–∏ –æ–Ω –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const args = process.argv.slice(2);
  const filePath = args[0];
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
  const forceFlag = args.includes('--force');
  const skipConfirmation = args.includes('--yes') || args.includes('-y');
  const language = args.find(arg => arg.startsWith('--lang='))?.split('=')[1] || process.env.DEFAULT_LANGUAGE || 'en';
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–µ—Ä–µ–¥–∞–ª–∏ –ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞–ø—Ä—è–º—É—é –≤–º–µ—Å—Ç–æ —Ñ–∞–π–ª–∞
  if (filePath && !filePath.startsWith('--') && !filePath.includes('/') && !filePath.includes('.')) {
    console.log(chalk.yellow(`‚ö†Ô∏è –ü–æ—Ö–æ–∂–µ, –≤—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä: "${filePath}"`));
    console.log(chalk.cyan(`üí° –î–ª—è —ç—Ç–æ–≥–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:`));
    console.log(chalk.cyan(`   node generate_for_product.js "${filePath}" ${forceFlag ? '--force' : ''}`));
    process.exit(1);
  }
  
  if (!filePath || filePath.startsWith('--')) {
    console.error(chalk.red('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–æ–≤–∞—Ä–æ–≤!'));
    console.log(chalk.blue('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node generate_batch.js path/to/products_list.txt [–ø–∞—Ä–∞–º–µ—Ç—Ä—ã]'));
    console.log(chalk.blue('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:'));
    console.log(chalk.blue('  --force    –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤'));
    console.log(chalk.blue('  --yes,-y   –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è'));
    console.log(chalk.blue('  --lang=xx  –£–∫–∞–∑–∞—Ç—å —è–∑—ã–∫ (en, ru)'));
    console.log(chalk.yellow('\n–î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:'));
    console.log(chalk.yellow('  node generate_for_product.js "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"'));
    process.exit(1);
  }
  
  generateBatchDescriptions(filePath, { 
    language, 
    force: forceFlag,
    skipConfirmation
  })
    .then(() => {
      console.log(chalk.green('üéâ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'));
    })
    .catch(error => {
      console.error(chalk.red('‚ùå –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π.'));
      process.exit(1);
    });
}

module.exports = {
  generateBatchDescriptions,
  readProductListFromFile
}; 